/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AcademicIdentityService } from "../academicIdentity.service";
import { AcademicIdentityCreateInput } from "./AcademicIdentityCreateInput";
import { AcademicIdentity } from "./AcademicIdentity";
import { AcademicIdentityFindManyArgs } from "./AcademicIdentityFindManyArgs";
import { AcademicIdentityWhereUniqueInput } from "./AcademicIdentityWhereUniqueInput";
import { AcademicIdentityUpdateInput } from "./AcademicIdentityUpdateInput";

export class AcademicIdentityControllerBase {
  constructor(protected readonly service: AcademicIdentityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AcademicIdentity })
  async createAcademicIdentity(
    @common.Body() data: AcademicIdentityCreateInput
  ): Promise<AcademicIdentity> {
    return await this.service.createAcademicIdentity({
      data: data,
      select: {
        academicPartnerId: true,
        createdAt: true,
        guildUuid: true,
        id: true,
        internalStudentId: true,
        isDeleted: true,
        isLocked: true,
        isStudent: true,
        partnerStudentId: true,
        primaryInternalStudentId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AcademicIdentity] })
  @ApiNestedQuery(AcademicIdentityFindManyArgs)
  async academicIdentities(
    @common.Req() request: Request
  ): Promise<AcademicIdentity[]> {
    const args = plainToClass(AcademicIdentityFindManyArgs, request.query);
    return this.service.academicIdentities({
      ...args,
      select: {
        academicPartnerId: true,
        createdAt: true,
        guildUuid: true,
        id: true,
        internalStudentId: true,
        isDeleted: true,
        isLocked: true,
        isStudent: true,
        partnerStudentId: true,
        primaryInternalStudentId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AcademicIdentity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async academicIdentity(
    @common.Param() params: AcademicIdentityWhereUniqueInput
  ): Promise<AcademicIdentity | null> {
    const result = await this.service.academicIdentity({
      where: params,
      select: {
        academicPartnerId: true,
        createdAt: true,
        guildUuid: true,
        id: true,
        internalStudentId: true,
        isDeleted: true,
        isLocked: true,
        isStudent: true,
        partnerStudentId: true,
        primaryInternalStudentId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AcademicIdentity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAcademicIdentity(
    @common.Param() params: AcademicIdentityWhereUniqueInput,
    @common.Body() data: AcademicIdentityUpdateInput
  ): Promise<AcademicIdentity | null> {
    try {
      return await this.service.updateAcademicIdentity({
        where: params,
        data: data,
        select: {
          academicPartnerId: true,
          createdAt: true,
          guildUuid: true,
          id: true,
          internalStudentId: true,
          isDeleted: true,
          isLocked: true,
          isStudent: true,
          partnerStudentId: true,
          primaryInternalStudentId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AcademicIdentity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAcademicIdentity(
    @common.Param() params: AcademicIdentityWhereUniqueInput
  ): Promise<AcademicIdentity | null> {
    try {
      return await this.service.deleteAcademicIdentity({
        where: params,
        select: {
          academicPartnerId: true,
          createdAt: true,
          guildUuid: true,
          id: true,
          internalStudentId: true,
          isDeleted: true,
          isLocked: true,
          isStudent: true,
          partnerStudentId: true,
          primaryInternalStudentId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
