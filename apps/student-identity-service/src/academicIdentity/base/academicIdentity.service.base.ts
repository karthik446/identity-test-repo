/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AcademicIdentity } from "@prisma/client";

export class AcademicIdentityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AcademicIdentityCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicIdentityCountArgs>
  ): Promise<number> {
    return this.prisma.academicIdentity.count(args);
  }

  async academicIdentities<T extends Prisma.AcademicIdentityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicIdentityFindManyArgs>
  ): Promise<AcademicIdentity[]> {
    return this.prisma.academicIdentity.findMany(args);
  }
  async academicIdentity<T extends Prisma.AcademicIdentityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicIdentityFindUniqueArgs>
  ): Promise<AcademicIdentity | null> {
    return this.prisma.academicIdentity.findUnique(args);
  }
  async createAcademicIdentity<T extends Prisma.AcademicIdentityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicIdentityCreateArgs>
  ): Promise<AcademicIdentity> {
    return this.prisma.academicIdentity.create<T>(args);
  }
  async updateAcademicIdentity<T extends Prisma.AcademicIdentityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicIdentityUpdateArgs>
  ): Promise<AcademicIdentity> {
    return this.prisma.academicIdentity.update<T>(args);
  }
  async deleteAcademicIdentity<T extends Prisma.AcademicIdentityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicIdentityDeleteArgs>
  ): Promise<AcademicIdentity> {
    return this.prisma.academicIdentity.delete(args);
  }
}
